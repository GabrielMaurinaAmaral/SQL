/* ESTRUTURA DE UMA TRIGGER -> GATILHO */
/*
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETEUPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGUN -> INICIO
         QUALQUER COMANDO SQL
END -> FIM 
*/

CREATE DATABASE AUTOMACAO;
USE AUTOMACAO;
/* TABELA ORIGINAL */
CREATE TABLE Usuario(
    id_Usuario INT PRIMARY KEY AUTO_INCREMENT,
    nome_Usuario VARCHAR(30),
    login_Usuario VARCHAR(30),
    senha_Usuario VARCHAR(100)
);

/* TABELA DE BACK UP */
CREATE TABLE BKP_Usuario (
    id_Backup INT PRIMARY KEY AUTO_INCREMENT,
    id_Usuario INT,
    nome_Usuario VARCHAR(30),
    login_Usuario VARCHAR(30)
);

/* criando trigger*/
DELIMITER $

CREATE TRIGGER Backup_User /* CRIANDO */
BEFORE DELETE ON Usuario /* CONDIÇÃO  -> DEPOIS QUE FOR DELETADO ALGO EM USUARIO*/
FOR EACH ROW /* DIZ QUE SERA FEITA UMA VEZ PARA CADA CONDIÇÃO SATISFEITA*/
BEGIN
    INSERT INTO BKP_Usuario VALUES 
    (NULL, OLD.id_Usuario, OLD.nome_Usuario, OLD.login_Usuario);
END
$

DELIMITER ;

/* INSERINDO DADOS */
INSERT INTO Usuario VALUES(NULL, 'GABRIEL', 'GABRIELZIN', 'SENHA123SENHA');
INSERT INTO Usuario VALUES(NULL, 'User1', 'user1_login', 'password1');
INSERT INTO Usuario VALUES(NULL, 'User2', 'user2_login', 'password2');
INSERT INTO Usuario VALUES(NULL, 'User3', 'user3_login', 'password3');
INSERT INTO Usuario VALUES(NULL, 'User4', 'user4_login', 'password4');
INSERT INTO Usuario VALUES(NULL, 'User5', 'user5_login', 'password5');
INSERT INTO Usuario VALUES(NULL, 'User6', 'user6_login', 'password6');
INSERT INTO Usuario VALUES(NULL, 'User7', 'user7_login', 'password7');
INSERT INTO Usuario VALUES(NULL, 'User8', 'user8_login', 'password8');
INSERT INTO Usuario VALUES(NULL, 'User9', 'user9_login', 'password9');
INSERT INTO Usuario VALUES(NULL, 'User10', 'user10_login', 'password10');
INSERT INTO Usuario VALUES(NULL, 'User11', 'user11_login', 'password11');
INSERT INTO Usuario VALUES(NULL, 'User12', 'user12_login', 'password12');
INSERT INTO Usuario VALUES(NULL, 'User13', 'user13_login', 'password13');
INSERT INTO Usuario VALUES(NULL, 'User14', 'user14_login', 'password14');
INSERT INTO Usuario VALUES(NULL, 'User15', 'user15_login', 'password15');
INSERT INTO Usuario VALUES(NULL, 'User16', 'user16_login', 'password16');
INSERT INTO Usuario VALUES(NULL, 'User17', 'user17_login', 'password17');
INSERT INTO Usuario VALUES(NULL, 'User18', 'user18_login', 'password18');
INSERT INTO Usuario VALUES(NULL, 'User19', 'user19_login', 'password19');
INSERT INTO Usuario VALUES(NULL, 'User20', 'user20_login', 'password20');

/*DELETANDO ALGUMA LINHA NA TABELA*/
DELETE FROM Usuario WHERE id_Usuario=1;

/* FAZENDO UMA TABELA INCHERGAR OUTRO 
    UM BANCO CONVERSANDO COM OUTRO  */
CREATE DATABASE AUTOMACAO;
USE AUTOMACAO;

CREATE TABLE Produtos(
    id_Produto INT PRIMARY KEY AUTO_INCREMENT,
    nome_Produto VARCHAR(30),
    valor_Produto FLOAT(10,2)
);

STATUS
/*CRIANDO UM BANCO DE DADOS DE BACKUP*/
CREATE DATABASE BACKUP;
USE BACKUP;

CREATE TABLE BKP_Produtos(
    id_Backup INT PRIMARY KEY AUTO_INCREMENT,
    id_Produto INT ,
    nome_Produto VARCHAR(30),
    valor_Produto FLOAT(10,2)
);

INSERT INTO BACKUP.BKP_Produtos VALUES 
(NULL, 100, 'TESTE1', 1.1);

/* CRIANDO GATILHO PARA QUE TENHA CONVERSA ENTRE OS BANCOS*/
USE AUTOMACAO;

DELIMITER $

CREATE TRIGGER Backup_Produtos
AFTER INSERT ON Produtos
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_Produtos VALUES
    (NULL, NEW.id_Produto, NEW.nome_Produto, NEW.valor_Produto);
    /* NEW -> PQ ESTA INDO ANTES DE INSERIR*/
END
$

DELIMITER ;

INSERT INTO Produtos VALUES (NULL, 'PRODUTO_A', 5.99);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_B', 12.45);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_C', 8.75);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_D', 19.99);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_E', 3.50);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_F', 14.25);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_G', 6.80);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_H', 11.00);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_I', 7.99);
INSERT INTO Produtos VALUES (NULL, 'PRODUTO_J', 2.50);

/* VERIFICANDO SE TUDO DEU CERTO */
SELECT * FROM PRODUTOS;
SELECT * FROM BACKUP.BKP_PRODUTOS;

/* 
AUDITANDO UMA TABLEA TRIGGER
DEICANDO MAIS DETABLADO A TABELA DP BACKPUP
COM OQUE FOI FEITO, HORARIO E QUAL USUARIO FEZ
*/
/*QUANDO*/
SELECT NOW();
/*QUEM*/
SELECT CURRENT_USER();

CREATE DATABASE BACKUP;
USE BACKUP;

CREATE TABLE BKP_Produto(
	id_BKP_Produto INT PRIMARY KEY AUTO_INCREMENT,
	id_Produto INT,
	nome_Produto VARCHAR(30),
    valor_original_Produto FLOAT(10,2),
	valor_alterado_Produto FLOAT(10,2),
	DATA DATETIME,
	usuario_BKP_Produto VARCHAR(30),
	evento_BKP_Produto CHAR(1)
);

USE ;
SELECT * FROM PRODUTO;

DELIMITER $
CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, NEW.VALOR,
    NOW(),CURRENT_USER(),'U');
END
$
DELIMITER ;

UPDATE PRODUTO SET VALOR = 110.00
WHERE IDPRODUTO = 4;

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

/* AUTORELACIONAMENTO1 
FAZENDO UMA TABELA CONVERSAR COM ELA MESMO
*/
CREATE TABLE Cursos(
    id_Curso INT PRIMARY KEY AUTO_INCREMENT,
    nome_Curso VARCHAR(30),
    horas_Curso INT,
    valor_Curso FLOAT(10,2),
    id__Prereq INT
);

ALTER TABLE Cursos ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(id__Prereq) REFERENCES Cursos(id_Curso);

INSERT INTO Cursos VALUES(NULL, 'MATEMATICA', 90, 500.00, NULL);
INSERT INTO Cursos VALUES(NULL, 'CALCULO1', 60, 400.00, 1);
INSERT INTO Cursos VALUES(NULL, 'ALGEBRA', 30, 300.00, 1);
INSERT INTO Cursos VALUES(NULL, 'CALCULO2', 60, 300.00, 2);
INSERT INTO Cursos VALUES(NULL, 'PORTUGUES', 90, 600.00, NULL);
INSERT INTO Cursos VALUES(NULL, 'GRAMATICA', 30, 200.00, 5);

SELECT nome_Curso, valor_Curso, horas_Curso, 
IFNULL(id__Prereq, "SEM REQUEZITOS") 'REQUISITO'
FROM Cursos;

/* NOME, VALOR, HORAS E O NOME DO PRE REQUISITO DO CURSO */
SELECT C.nome_Curso, C.valor_Curso, C.horas_Curso, 
IFNULL(P.nome_Curso, "---") 'REQUISITO' 
FROM Cursos C LEFT JOIN Cursos P
ON P.id_Curso = C.id__Prereq;


/*ASSUNTO NOVO*/
/* CURSORES */
CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE Vendedores(
	id_Vendedor INT PRIMARY KEY AUTO_INCREMENT,
	nome_Vendedor VARCHAR(50),
	jan_Vendedor INT,
	fev_vendedor INT,
	mar_Vendedor INT
);

INSERT INTO Vendedores VALUES(NULL,'MAFRA',32432,242334,574545);
INSERT INTO Vendedores VALUES(NULL,'CLARA',65465,65443,653454);
INSERT INTO Vendedores VALUES(NULL,'JOAO',12432,65356,8756);
INSERT INTO Vendedores VALUES(NULL,'LILIAN',4567,9676,8765);
INSERT INTO Vendedores VALUES(NULL,'ANTONIO',3467,68756,99765);
INSERT INTO Vendedores VALUES(NULL,'GLORIA',54786,76889,7098);
INSERT INTO Vendedores VALUES(NULL,'ANA',43213,87654,98765);
INSERT INTO Vendedores VALUES(NULL,'ROBERTO',98765,12345,54321);
INSERT INTO Vendedores VALUES(NULL,'CAROLINA',56789,98765,87654);
INSERT INTO Vendedores VALUES(NULL,'FELIPE',87654,56789,43213);
INSERT INTO Vendedores VALUES(NULL,'RAFAEL',98765,87654,43213);
INSERT INTO Vendedores VALUES(NULL,'VANESSA',98765,76543,65432);
INSERT INTO Vendedores VALUES(NULL,'RICARDO',34567,65432,23456);
INSERT INTO Vendedores VALUES(NULL,'MARIANA',87654,34567,54321);
INSERT INTO Vendedores VALUES(NULL,'GUSTAVO',87654,65432,76543);
INSERT INTO Vendedores VALUES(NULL,'LUCIA',65432,98765,87654);
INSERT INTO Vendedores VALUES(NULL,'SILVIA', 54321, 98765, 12345);
INSERT INTO Vendedores VALUES(NULL,'RODRIGO', 87654, 23456, 76543);
INSERT INTO Vendedores VALUES(NULL,'ANDREIA', 98765, 87654, 65432);
INSERT INTO Vendedores VALUES(NULL,'FABIO', 65432, 34567, 98765);
INSERT INTO Vendedores VALUES(NULL,'BARBARA', 87654, 76543, 54321);
INSERT INTO Vendedores VALUES(NULL,'PEDRO', 23456, 65432, 87654);
INSERT INTO Vendedores VALUES(NULL,'VIVIANE', 87654, 98765, 76543);
INSERT INTO Vendedores VALUES(NULL,'ALBERTO', 76543, 87654, 98765);
INSERT INTO Vendedores VALUES(NULL,'CLAUDIO', 54321, 98765, 87654);
INSERT INTO Vendedores VALUES(NULL,'TATIANA', 98765, 87654, 54321);
INSERT INTO Vendedores VALUES(NULL,'LEONARDO', 87654, 65432, 23456);
INSERT INTO Vendedores VALUES(NULL,'LILIANA', 76543, 98765, 87654);
INSERT INTO Vendedores VALUES(NULL,'FERNANDO', 98765, 76543, 87654);
INSERT INTO Vendedores VALUES(NULL,'GISELE', 87654, 76543, 65432);
INSERT INTO Vendedores VALUES(NULL,'MARCIO', 87654, 54321, 98765);
INSERT INTO Vendedores VALUES(NULL,'LARA', 54321, 98765, 87654);
INSERT INTO Vendedores VALUES(NULL,'RAFAELA', 76543, 87654, 98765);
INSERT INTO Vendedores VALUES(NULL,'RUBENS', 87654, 76543, 54321);
INSERT INTO Vendedores VALUES(NULL,'LUCIANO', 87654, 76543, 54321);
INSERT INTO Vendedores VALUES(NULL,'VERA', 87654, 54321, 98765);


/* MAEIRA NÃO IDEAL*/
SELECT * FROM Vendedores;
SELECT nome_Vendedor, (jan_Vendedor+fev_vendedor+mar_Vendedor) AS TOTAL FROM Vendedores;
SELECT nome_Vendedor, (jan_Vendedor+fev_vendedor+mar_Vendedor) AS TOTAL, (jan_Vendedor+fev_vendedor+mar_Vendedor)/3 AS MEDIA FROM Vendedores;
/* MANEIRA IDEAL */
CREATE TABLE Venda_Total(
	nome_Vendedor VARCHAR(50),
	jan_Vendedor INT,
	fev_vendedor INT,
	mar_Vendedor INT,
	total_Vendedor INT,
	media_Vendedor INT
);

DELIMITER $
/* FUNDAMENTO NA CRIAÇÃO DO CURSOR*/
CREATE PROCEDURE Insere_Dados_Venda_Total()
BEGIN
    DECLARE fim INT DEFAULT 0;
    DECLARE v_1, v_2, v_3, v_total, v_mediA INT;
    DECLARE v_nome VARCHAR(50);
    
    DECLARE Registros CURSOR FOR(
        SELECT nome_Vendedor, jan_Vendedor, fev_Vendedor, mar_Vendedor
        FROM VENDEDORES
    );
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fim=1;
    
    OPEN Registros;
    REPEAT
        FETCH Registros INTO v_nome, v_1, v_2, v_3;
        IF NOT fim THEN
            SET v_total= v_1+v_2+v_3;
            SET v_media= v_total/3;
            INSERT INTO Venda_Total VALUES
            (v_nome, v_1, v_2, v_3, v_total, v_media);
        END IF;
    UNTIL fim END REPEAT;
    CLOSE Registros;
END$
DELIMITER ;

SELECT * FROM Vendedores;
CALL Insere_Dados_Venda_Total();
SELECT * FROM Venda_Total;

